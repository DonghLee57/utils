# -*- coding: utf-8 -*-
"""
# Generate qpoints.yaml
>> $PHONOPY --qpoints="0 0 0" --eigenvectors

Phonon eigenvector extractor from qpoints.yaml -> single extxyz as forces
"""

import numpy as np
import yaml
import sys
from ase import Atoms
from ase.io import read, write
from ase.data import atomic_numbers

def main():
    if len(sys.argv) > 1:
        input_file = sys.argv[1]
    else:
        input_file = "qpoints.yaml"

    elem = 'A B C'.split()
    base_structure = 'your.lammps'

    # Get structural info
    tmp = read(base_structure, style='atomic', format='lammps-data')
    tmp = tmp[tmp.get_array('id').argsort()]
    symbols = tmp.get_chemical_symbols()
    for i, item in enumerate(symbols):
        symbols[i] = elem[atomic_numbers[item]-1]
    positions = tmp.get_positions()

    # Get phonon info
    data = read_qpoints_yaml(input_file)
    modes = parse_all_modes(data)

    # Write output
    create_extxyz_frames(symbols, positions, modes)

# Functions
def read_qpoints_yaml(filename='qpoints.yaml'):
    """Read qpoints.yaml file generated by Phonopy."""
    try:
        with open(filename, 'r') as f:
            data = yaml.safe_load(f)
        return data
    except Exception as e:
        print(f"Error reading {filename}: {e}")
        sys.exit(1)

def parse_all_modes(data):
    """Parse all phonon modes with frequencies and eigenvectors."""
    all_modes = []

    for phonon in data['phonon']:
        qpos = phonon['q-position']
        for band in phonon['band']:
            freq = band['frequency']
            eigenvector = band['eigenvector']

            # Extract real part of eigenvector as forces
            forces = []
            for atom_vec in eigenvector:
                fx = atom_vec[0][0]  # real part
                fy = atom_vec[1][0]  # real part
                fz = atom_vec[2][0]  # real part
                forces.append([fx, fy, fz])

            all_modes.append({
                'frequency': freq,
                'qposition': qpos,
                'forces': np.array(forces),
            })

    # Sort by frequency ascending
    all_modes.sort(key=lambda m: m['frequency'])
    #for x in all_modes:
    #    print(x['frequency'])
    return all_modes


def create_extxyz_frames(symbols, positions, modes, output_filename='phonon_modes.extxyz'):
    """Create a single extxyz file with all modes as frames."""
    images = []
    
    for idx, mode in enumerate(modes):
        freq = mode['frequency']
        qpos = mode['qposition']
        forces = mode['forces']
        
        # Create Atoms object with base positions and forces as arrays
        atoms = Atoms(symbols=symbols, positions=positions)
        atoms.arrays['forces'] = forces
        
        images.append(atoms)
        
    # Write all frames to one file
    write(output_filename, images, format='extxyz')
    print(f"[INFO] Wrote {len(modes)} phonon modes to '{output_filename}'")

if __name__ == "__main__":
    main()
